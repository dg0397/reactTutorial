{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","this","characters","Component","Form","initialState","state","handleChange","bind","submitForm","event","target","value","setState","handleSubmit","for","type","id","onChange","App","filter","character","i","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAEMA,EAAc,WAClB,OACE,+BACE,4BACE,qCACA,uCAMFC,EAAY,SAAAC,GAChB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACE,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAMR,OAAO,+BAAQJ,IAkBFU,E,iLAdH,IAAD,EAC8BC,KAAKZ,MAAnCa,EADA,EACAA,WAAWH,EADX,EACWA,gBAClB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACAR,cAAiBW,EACjBH,gBAAiBA,S,GARLI,a,OCyBLC,E,YAnDb,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KAEDgB,aAAe,CAClBT,KAAM,GACNC,IAAK,IAGP,EAAKS,MAAQ,EAAKD,aAClB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAVD,E,0EAYNE,GAAO,IAAD,EACOA,EAAMC,OAAtBf,EADS,EACTA,KAAMgB,EADG,EACHA,MAEdX,KAAKY,SAAL,eACGjB,EAAOgB,M,mCAIVX,KAAKZ,MAAMyB,aAAab,KAAKK,OAC7BL,KAAKY,SAASZ,KAAKI,gB,+BAEX,IAAD,EACeJ,KAAKK,MAAnBV,EADD,EACCA,KAAMC,EADP,EACOA,IAEd,OACE,8BACE,2BAAOkB,IAAI,QAAX,QACA,2BACEC,KAAK,OACLpB,KAAK,OACLqB,GAAG,OACHL,MAAOhB,EACPsB,SAAUjB,KAAKM,eACjB,2BAAOQ,IAAI,OAAX,OACA,2BACEC,KAAK,OACLpB,KAAK,MACLqB,GAAG,MACHL,MAAOf,EACPqB,SAAUjB,KAAKM,eACjB,2BACES,KAAK,SACLJ,MAAM,SACNd,QAASG,KAAKQ,kB,GA9CLN,aC0CJgB,E,YAvCX,WAAY9B,GAAO,IAAD,8BAChB,4CAAMA,KACDiB,MAAQ,CACXJ,WAAa,IAEf,EAAKH,gBAAkB,EAAKA,gBAAgBS,KAArB,gBACvB,EAAKM,aAAe,EAAKA,aAAaN,KAAlB,gBANJ,E,6EASFd,GAAQ,IACdQ,EAAeD,KAAKK,MAApBJ,WAERD,KAAKY,SAAS,CACZX,WAAYA,EAAWkB,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM5B,S,mCAKN2B,GACXpB,KAAKY,SAAS,CACZX,WAAW,GAAD,mBAAMD,KAAKK,MAAMJ,YAAjB,CAA6BmB,Q,+BAKzC,OACE,yBAAKE,UAAU,aACb,kBAAC,EAAD,CACArB,WAAcD,KAAKK,MAAMJ,WACzBH,gBAAiBE,KAAKF,kBACtB,kBAAC,EAAD,CACAe,aAAcb,KAAKa,oB,GAjCXX,aCQEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.02ab9b1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Name:</th>\r\n        <th>Job:</th>\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nconst TableBody = props => {\r\n  const rows = props.characterData.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n        <td>\r\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return <tbody>{rows}</tbody>\r\n}\r\n\r\nclass Table extends Component {\r\n  render() {\r\n    const {characters,removeCharacter} = this.props;\r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody \r\n        characterData = {characters} \r\n        removeCharacter={removeCharacter}\r\n        />\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table","import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.initialState = {\r\n      name: '',\r\n      job: '',\r\n    }\r\n\r\n    this.state = this.initialState;\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.submitForm = this.submitForm.bind(this)\r\n  }\r\n  handleChange(event){\r\n    const { name, value } = event.target\r\n  \r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n  submitForm(){\r\n    this.props.handleSubmit(this.state)\r\n    this.setState(this.initialState)\r\n  }\r\n  render() {\r\n    const { name, job } = this.state;\r\n  \r\n    return (\r\n      <form>\r\n        <label for=\"name\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          id=\"name\"\r\n          value={name}\r\n          onChange={this.handleChange} />\r\n        <label for=\"job\">Job</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"job\"\r\n          id=\"job\"\r\n          value={job}\r\n          onChange={this.handleChange} />\r\n        <input \r\n          type=\"button\" \r\n          value=\"Submit\" \r\n          onClick={this.submitForm} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, {Component} from \"react\";\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        characters : []\r\n      }\r\n      this.removeCharacter = this.removeCharacter.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    removeCharacter(index) {\r\n      const { characters } = this.state\r\n    \r\n      this.setState({\r\n        characters: characters.filter((character, i) => {\r\n          return i !== index\r\n        }),\r\n      })\r\n    }\r\n\r\n    handleSubmit(character) {\r\n      this.setState({ \r\n        characters: [...this.state.characters, character] \r\n      })\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div className=\"container\">\r\n          <Table \r\n          characters = {this.state.characters} \r\n          removeCharacter={this.removeCharacter}/>\r\n          <Form\r\n          handleSubmit={this.handleSubmit} \r\n          />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}